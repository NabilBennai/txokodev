package com.txokodev.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectIdeaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectIdeaAllPropertiesEquals(ProjectIdea expected, ProjectIdea actual) {
        assertProjectIdeaAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectIdeaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectIdeaAllUpdatablePropertiesEquals(ProjectIdea expected, ProjectIdea actual) {
        assertProjectIdeaUpdatableFieldsEquals(expected, actual);
        assertProjectIdeaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectIdeaAutoGeneratedPropertiesEquals(ProjectIdea expected, ProjectIdea actual) {
        assertThat(actual)
            .as("Verify ProjectIdea auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectIdeaUpdatableFieldsEquals(ProjectIdea expected, ProjectIdea actual) {
        assertThat(actual)
            .as("Verify ProjectIdea relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getBudget()).as("check budget").isEqualTo(expected.getBudget()))
            .satisfies(a -> assertThat(a.getDeadline()).as("check deadline").isEqualTo(expected.getDeadline()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectIdeaUpdatableRelationshipsEquals(ProjectIdea expected, ProjectIdea actual) {
        assertThat(actual)
            .as("Verify ProjectIdea relationships")
            .satisfies(a -> assertThat(a.getAppUser()).as("check appUser").isEqualTo(expected.getAppUser()));
    }
}
