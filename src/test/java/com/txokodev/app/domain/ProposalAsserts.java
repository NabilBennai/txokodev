package com.txokodev.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProposalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProposalAllPropertiesEquals(Proposal expected, Proposal actual) {
        assertProposalAutoGeneratedPropertiesEquals(expected, actual);
        assertProposalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProposalAllUpdatablePropertiesEquals(Proposal expected, Proposal actual) {
        assertProposalUpdatableFieldsEquals(expected, actual);
        assertProposalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProposalAutoGeneratedPropertiesEquals(Proposal expected, Proposal actual) {
        assertThat(actual)
            .as("Verify Proposal auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProposalUpdatableFieldsEquals(Proposal expected, Proposal actual) {
        assertThat(actual)
            .as("Verify Proposal relevant properties")
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProposalUpdatableRelationshipsEquals(Proposal expected, Proposal actual) {
        assertThat(actual)
            .as("Verify Proposal relationships")
            .satisfies(a -> assertThat(a.getAppUser()).as("check appUser").isEqualTo(expected.getAppUser()))
            .satisfies(a -> assertThat(a.getProjectIdea()).as("check projectIdea").isEqualTo(expected.getProjectIdea()));
    }
}
